<template>
  <div class="count-flop" :key="compKey">
    <div :class="!isNaN(item)?'count-flop-box':'count-flop-point'" v-for="(item, index) in value" :key="index">
       <div v-if="!isNaN(item)" class="count-flop-content" :class="['rolling_' + item]">
        <div v-for="(item2,index2) in numberList" :key="index2" class="count-flop-num">{{item2}}</div>
      </div>
      <div v-else class="count-flop-content count-flop-Symbol">{{item}}</div>
    </div>
    <div v-if="suffix" class="count-flop-unit">{{suffix}}</div>
  </div>
</template>
<script>
/**
 * 数字翻牌
 * val:传值数字，字符串都可以
 * suffix:后续修改下，暂时想法是展示千分位的，但是效果不好暂时别用
 */
export default {
  data () {
    return {
      value: [],
      numberList: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
      compKey: 0
    }
  },
  props: ['val', 'suffix'],
  watch: {
    val () {
      this.value = this.val.toString().split('')
      this.compKey += 1
    }
  },
  created () {
    this.value = this.val.toString().split('')
  }
}
</script>
<style scoped>
.count-flop {
  display: inline-block;
  /* font-size: 0; */
  /* 可更改 */
  height: 72px;
  line-height: 72px;
  font-size: 50px;
  /* color: #4898f1; */
}

.count-flop > div {
  position: relative;
  display: inline-block;
  overflow: hidden;
  height: 100%;
}

.count-flop-box {
  /* 可更改 */
  width: 50px;
  height: 72px;
  line-height: 72px;
  border: 2px solid;
  border-image: linear-gradient(180deg, rgba(26,153,224,1) 0%,rgba(1,63,166,1) 100%) 2 2;
  box-shadow:  0 3px 9px 4px rgba(19,27,148,1);
  margin-right: 10px;
  font-size: 50px;
  font-weight: 600;
  color: rgba(137,234,255,1);
}

.count-flop-point {
  /* 可更改 */
  margin-right: 10px;
  width: 10px;
}

.count-flop-content {
  /* font-family: MicrosoftYaHei-Bold; */
  text-align: center;
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  animation-fill-mode: forwards !important;
}
.count-flop-Symbol{
  text-align: center;
  top: 10px;
  font-size: 50px;
  font-weight: 600;
  color: rgba(137,234,255,1);
}

.rolling_0 {
  animation: rolling_0 2.1s ease;
}

@keyframes rolling_0 {
  from {
    transform: translateY(-90%);
  }
  to {
    transform: translateY(0);
  }
}

.rolling_1 {
  animation: rolling_1 3s ease;
}

@keyframes rolling_1 {
  from {
    transform: translateY(0);
  }
  to {
    transform: translateY(-10%);
  }
}

.rolling_2 {
  animation: rolling_2 2.1s ease;
}

@keyframes rolling_2 {
  from {
    transform: translateY(0);
  }
  to {
    transform: translateY(-20%);
  }
}

.rolling_3 {
  animation: rolling_3 3s ease;
}

@keyframes rolling_3 {
  from {
    transform: translateY(0);
  }
  to {
    transform: translateY(-30%);
  }
}

.rolling_4 {
  animation: rolling_4 2.1s ease;
}

@keyframes rolling_4 {
  from {
    transform: translateY(0);
  }
  to {
    transform: translateY(-40%);
  }
}

.rolling_5 {
  animation: rolling_5 3s ease;
}

@keyframes rolling_5 {
  from {
    transform: translateY(0);
  }
  to {
    transform: translateY(-50%);
  }
}

.rolling_6 {
  animation: rolling_6 2.1s ease;
}

@keyframes rolling_6 {
  from {
    transform: translateY(0);
  }
  to {
    transform: translateY(-60%);
  }
}

.rolling_7 {
  animation: rolling_7 3.1s ease;
}

@keyframes rolling_7 {
  from {
    transform: translateY(0);
  }
  to {
    transform: translateY(-70%);
  }
}

.rolling_8 {
  animation: rolling_8 2.1s ease;
}

@keyframes rolling_8 {
  from {
    transform: translateY(0);
  }
  to {
    transform: translateY(-80%);
  }
}

.rolling_9 {
  animation: rolling_9 3.6s ease;
}

@keyframes rolling_9 {
  from {
    transform: translateY(0);
  }
  to {
    transform: translateY(-90%);
  }
}

</style>
